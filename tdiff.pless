DIFF_TOOL=vimdiff
FILE_EDIT=vim
DIR_EDIT=open_in_ftl

open_in_ftl() { tmux new-window "ftl '$1/$3'" ; }

bind tdiff mode		m		next_mode		"next diff mode"

bind tdiff find		n		next_difference		"next difference"
bind tdiff find		N		previous_difference	"previous difference"
bind tdiff find		gff		diff_fzf		"fzf select"
bind tdiff find		b		diff_fzf		"fzf select"

bind tdiff edit		ENTER		open_diff		"open diff"

bind tdiff synch	synch		synch			"synch"
bind tdiff synch	DELETE		delete			"synch"
bind tdiff synch	tl		to_left			"Copy to left"
bind tdiff synch	tr		to_right		"Copy to right"

tdiff_setup()
{
mode=${e[mode]}

generate_index_keys

deleted_dir1=$(<"${e[only_d2]}" wc -l)
deleted_dir2=$(<"${e[only_d1]}" wc -l)
}

generate_index_keys()
{
index_key="tree_${e[mode]}_diff_index"

<"${e[$index_key]}" readarray -t diff_index
< <(tac "${e[$index_key]}") readarray -t diff_index_reversed
}

tdiff_setup

next_mode()
{
if   [[ "${e[mode]}" == all    ]] ; then e[mode]=common
elif [[ "${e[mode]}" == common ]] ; then e[mode]=diff
else [[ "${e[mode]}" == diff   ]] ; e[mode]=all
fi

[[ "${e[mode]}" == all    ]] && { tree1="${e[tree_all_d1]}"    ; tree2="${e[tree_all_d2]}"    ; }
[[ "${e[mode]}" == common ]] && { tree1="${e[tree_common_d1]}" ; tree2="${e[tree_common_d2]}" ; }
[[ "${e[mode]}" == diff   ]] && { tree1="${e[tree_diff]}"      ; tree2=                  ; }

reload_input_streams $tree1 $tree2
generate_index_keys
}

open_diff()
{
no_color_key="tree_${e[mode]}_no_color"
entry="$(tail -n +$((top_line + 1)) "${e[$no_color_key]}" | head -n 1)"

if   [[ -f "${e[dir1]}/$entry" && -f "${e[dir2]}/$entry" ]] ; then $DIFF_TOOL "${e[dir1]}/$entry" "${e[dir2]}/$entry"
elif [[ -f "${e[dir1]}/$entry" ]] ;                           then $FILE_EDIT "${e[dir1]}/$entry"
elif [[ -f "${e[dir2]}/$entry" ]] ;                           then $FILE_EDIT "${e[dir2]}/$entry"
else                                                               $DIR_EDIT  "${e[dir1]}" "${e[dir2]}" "$entry"
fi

echo -en '\e[?1049h\e[2J' ; stty -echo ; tput civis

list
}

next_difference()
{
found=
for i in "${diff_index[@]}" ; do ((i > top_line)) && { found=$i ; break ; } ; done 
[[ "$found" ]] && { ((top_line = found)) ; highlight=1 ; list ; } || { highlight= ; list ; }
}

previous_difference()
{
for i in "${diff_index_reversed[@]}" ; do ((i < top_line)) && { found=$i ; break ; } ; done 
[[ "$found" ]] && { ((top_line = found)) ; highlight=1 ; list ; } || { highlight= ; list ; }
}

diff_fzf()
{
exec 2>&9

diff_file="$(cat ${e[diff_files]} | fzf +s --ansi --keep-right)"

no_color_key="tree_${e[mode]}_no_color"
found=$(rg -n -m 1 "\./$diff_file" "${e[$no_color_key]}" | cut -d: -f1)

[[ "$found" ]] && { ((top_line = found - 1)) ; highlight=1 ; } || { highlight= ; }

exec 2>"$fs/log"

echo -en '\e[?1049h' ; stty -echo ; tput civis

list
}

synch()
{
# copy deleted file to other side
# directory recursively?

# change color, re-run diff?
:


}

to_left()
{
:
}

to_right()
{
:
}

delete()
{
# delete what's deleted on the other side
# delete files with diff?
# delete both?
:

entry="$(tail -n +$((top_line + 1)) "${e[$no_color_key]}" | head -n 1)"

# if   [[ -f "${e[dir1]}/$entry" && -f "${e[dir2]}/$entry" ]] ; then lh=
# elif [[ -f "${e[dir1]}/$entry" ]] ;                           then lh=
# elif [[ -f "${e[dir2]}/$entry" ]] ;                           then lh=
# else                                                              
# fi

lh=
}

update_status()
{
no_color_key="tree_${e[mode]}_no_color"
current_entry="..$(tail -n +$((top_line + 1)) ${e[$no_color_key]} | head -n 1)"

status=$(cut -c1-$COLUMNS <<<"[-$deleted_dir1, -$deleted_dir2, !${#diff_index[@]}] $current_entry\e[m")
echo -en "\e[$((bottom_line + 2));1H\e[K\e[38;5;240m$status\e[m"
}

# vim: set ft=bash:


