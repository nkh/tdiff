#!/bin/bash

declare -A modified1 modified2 

unbind c # default paneless key but we  use c for something else

bind tdiff display	ZL		flip_line_number	"flip line number overlay"
bind tdiff display	ZT		flip_line_total		"flip line total"

bind tdiff bindings	QUESTION_MARK	k_bindings		"show command bindings"

bind tdiff mode		m		next_mode		"next view mode"
bind tdiff mode		M		previous_mode		"previous view mode"
bind tdiff mode		r		refresh_diff		"refresh diff"

bind tdiff find		n		next_difference		"next difference"
bind tdiff find		N		previous_difference	"previous difference"
bind tdiff find		v		next_difference_all	"next deleted/changed/different type"
bind tdiff find		V		previous_difference_all	"previous deleted/changed/different type"
bind tdiff find		b		diff_fzf		"fzf select diff"
bind tdiff find		B		file_fzf		"fzf select file"
bind tdiff find		a		up_one_level		"scroll up one level"
bind tdiff find		z		down_one_level		"scroll down one level"
bind tdiff find		s		up_same_level		"scroll up to next entry with the same level"
bind tdiff find		x		down_same_level		"scroll down to next entry with the same level"

bind tdiff edit		ENTER		open_diff		"open diff"
bind tdiff edit		F		file_manager		"open file manager"
bind tdiff edit		AL		action_left		"disable/allow action on the left side tree"

bind tdiff delete	dd		delete			"delete both sides"
bind tdiff delete	dl		delete_left		"delete left"
bind tdiff delete	dr		delete_right		"delete right"

bind tdiff clipboard	yy		clipboard		"copy to clipboard both sides"
bind tdiff clipboard	yl		clipboard_left		"copy to clipboard left side"
bind tdiff clipboard	yr		clipboard_right		"copy to clipboard right side"

bind tdiff synch	cl		copy_to_left		"copy to left"
bind tdiff synch	cr		copy_to_right		"copy to right"

bind tdiff info		i		entries_information	"display some information about the entries"

refresh_diff()
{
clear ; echo "Refreshing ..."

tdiff -g --fs "${e[fs]}" "${e[dir1]}" "${e[dir2]}" &>/dev/null &&
	{ apply_mode ; } ||
	{ echo "tdiff: error: can't refresh" ; read -sn1 ; list ; }
}

tdiff_setup()
{
load_support_files

deleted_dir1=$(<"${e[only_d2]}" wc -l)
deleted_dir2=$(<"${e[only_d1]}" wc -l)
}

load_support_files()
{
index_file="${e[tree_${e[mode]}_diff_index]}"

<"$index_file"         readarray -t diff_index
< <(tac "$index_file") readarray -t diff_index_reversed

declare -Ag diff_entries=() ; for i in "${diff_index[@]}" ; do diff_entries[$i]=1 ; done

<"${e[tree_${e[mode]}_glyph]}" readarray -t glyphs 
<"${e[tree_${e[mode]}_color_grey]}" readarray -t grey_lines

entry_names=() ; <"${e[tree_${e[mode]}_no_color]}" readarray -t entry_names

< <(<"${e[tree_${e[mode]}_no_color]}" awk -F '/' '{print NF}' ) readarray -t levels
}

tdiff_setup

previous_mode()
{
if   [[ "${e[mode]}" == all         ]] ; then e[mode]=all_d2_only
elif [[ "${e[mode]}" == common      ]] ; then e[mode]=all
elif [[ "${e[mode]}" == diff        ]] ; then e[mode]=common
else [[ "${e[mode]}" == all_d2_only ]] ; e[mode]=diff
fi

apply_mode
}

next_mode()
{
if   [[ "${e[mode]}" == all         ]] ; then e[mode]=common
elif [[ "${e[mode]}" == common      ]] ; then e[mode]=diff
elif [[ "${e[mode]}" == diff        ]] ; then e[mode]=all_d2_only
else [[ "${e[mode]}" == all_d2_only ]] ; e[mode]=all
fi

apply_mode
}

apply_mode()
{
[[ "${e[mode]}" == all         ]] && { tree1="${e[tree_all_d1]}"      ; tree2="${e[tree_all_d2]}"    ; }
[[ "${e[mode]}" == common      ]] && { tree1="${e[tree_common_d1]}"   ; tree2="${e[tree_common_d2]}" ; }
[[ "${e[mode]}" == diff        ]] && { tree1="${e[tree_diff]}"        ; tree2=                       ; }
[[ "${e[mode]}" == all_d2_only ]] && { tree1="${e[tree_all_d2_only]}" ; tree2=                       ; }

echo -ne "\e[H\e[J"

load_support_files
reload_input_streams $tree1 $tree2
}

next_difference()
{
found=
for i in "${diff_index[@]}" ; do ((i > top_line)) && { found=$i ; break ; } ; done 
[[ "$found" ]] && { ((top_line = found)) ; highlight=1 ; list ; } || { highlight= ; list ; }
}

previous_difference()
{
for i in "${diff_index_reversed[@]}" ; do ((i < top_line)) && { found=$i ; break ; } ; done 
[[ "$found" ]] && { ((top_line = found)) ; highlight=1 ; list ; } || { highlight= ; list ; }
}

next_difference_all()
{
(( top_line >= max_lines )) && return

for (( l = top_line + 1 ; l < max_lines ; l++)) ; do
	entry="${entry_names[$l]}"

	[[ -e "${e[dir1]}/$entry" && -e "${e[dir2]}/$entry" ]] || break 

	[[ -f "${e[dir1]}/$entry" && -f "${e[dir2]}/$entry" ]] || [[ -d "${e[dir1]}/$entry" && -d "${e[dir2]}/$entry" ]] || break 

	[[ -f "${e[dir1]}/$entry" && -f "${e[dir2]}/$entry" ]] && (( ${diff_entries[$l]} ))  && break

done 

top_line=$l ; list
}

previous_difference_all()
{
(( top_line == 0 )) && return

for (( l = top_line - 1 ; l > 0 ; l--)) ; do
	entry="${entry_names[$l]}"

	[[ -e "${e[dir1]}/$entry" && -e "${e[dir2]}/$entry" ]] || break 

	[[ -f "${e[dir1]}/$entry" && -f "${e[dir2]}/$entry" ]] || [[ -d "${e[dir1]}/$entry" && -d "${e[dir2]}/$entry" ]] || break 

	[[ -f "${e[dir1]}/$entry" && -f "${e[dir2]}/$entry" ]] && (( ${diff_entries[$l]} ))  && break

done 

top_line=$l ; list
}

up_one_level()
{
(( top_line  == 0 )) && return

cl=${levels[$top_line]}
[[ "$cl" ]] || cl=${levels[((max_lines -1))]}

for (( l = top_line - 1 ; l > 0 ; l--)) ; do
	(( ${levels[$l]} < $cl )) && break
done 

top_line=$l ; list
}

down_one_level()
{
cl=${levels[$top_line]}
[[ "$cl" ]] || return

for (( l = top_line + 1 ; l < max_lines ; l++)) ; do
	(( ${levels[$l]} < $cl || ${levels[$l]} > $cl )) && break
done 

top_line=$l ; list
}

up_same_level()
{
(( top_line  == 0 )) && return

cl=${levels[$top_line]}
[[ "$cl" ]] || cl=${levels[((max_lines -1))]}

for (( l = top_line - 1 ; l > 0 ; l--)) ; do
	(( ${levels[$l]} <= $cl )) && break
done 

top_line=$l ; list
}

down_same_level()
{
cl=${levels[$top_line]}
[[ "$cl" ]] || return

for (( l = top_line + 1 ; l < max_lines ; l++)) ; do
	(( ${levels[$l]} <= $cl )) && break
done 

top_line=$l ; list
}

diff_fzf()
{
exec 2>&9

diff_file="$(cat ${e[diff_files]} | fzf +s --ansi --keep-right)"

found=$(rg -n -m 1 "$diff_file" "${e[tree_${e[mode]}_no_color]}" | cut -d: -f1)

[[ "$found" ]] && { ((top_line = found - 1)) ; highlight=1 ; } || { highlight= ; }

exec 2>"$fs/log"

alt_screen ; list
}

file_manager() { $DIR_EDIT "${e[dir1]}" "${e[dir2]}" "$(top_entry)"  ; alt_screen ; list ; }

entries_information()
{
entry="$(top_entry)"

clear ;

_entries_information "${e[dir1]}/$entry"
echo -e "\n---\n"
_entries_information "${e[dir2]}/$entry"

read -sn1

list
}

_entries_information()
{
[[ ! -e "$1" ]] && echo "Deleted" 

[[ -f "$1" ]] && stat "$1"

[[ -d "$1" ]] &&
	{
	stat "$1"
	echo -n " Files: " ; find "$1" | wc -l
	echo -n "  Size: " ; du -hs "$1" | cut -f1
	}
}

open_diff()
{
entry="$(top_entry)"

if   [[ -f "${e[dir1]}/$entry" && -f "${e[dir2]}/$entry" ]] ; then $DIFF_TOOL "${e[dir1]}/$entry" "${e[dir2]}/$entry"
elif [[ -f "${e[dir1]}/$entry" ]] ;                           then $FILE_EDIT "${e[dir1]}/$entry"
elif [[ -f "${e[dir2]}/$entry" ]] ;                           then $FILE_EDIT "${e[dir2]}/$entry"
else                                                               $DIR_EDIT  "${e[dir1]}" "${e[dir2]}" "$entry"
fi

[[ -f "${e[dir1]}/$entry" && -f "${e[dir2]}/$entry" ]] && 
	{
	diff -q "${e[dir1]}/$entry" "${e[dir2]}/$entry" >/dev/null &&
		{ diff_entries[$top_line]=  ; modified1[$entry]="$INT_SYNCHED" ; modified2[$entry]="$INT_SYNCHED" ; (( auto_advance )) && next_difference ; } ||
		{ diff_entries[$top_line]=1 ; modified1[$entry]="$INT_DIFF" ; modified2[$entry]="$INT_DIFF" ; }
	
	}

alt_screen ; list
}

file_fzf()
{
exec 2>&9

local file="$(<"${e[tree_${e[mode]}_no_color]}" lscolors | fzf +s --ansi --keep-right)"

found=$(rg -n -m 1 "$file" "${e[tree_${e[mode]}_no_color]}" | cut -d: -f1)

[[ "$found" ]] && { ((top_line = found - 1)) ; highlight=1 ; } || { highlight= ; }

exec 2>"$fs/log"

alt_screen ; list
}

clipboard()      { <<<"${e[dir1]}/${entry_names[$top_line]}	${e[dir2]}/${entry_names[$top_line]}" xsel -b -i ; }
clipboard_left() { <<<"${e[dir1]}/${entry_names[$top_line]}" xsel -b -i ; }
clipboard_right(){ <<<"${e[dir2]}/${entry_names[$top_line]}" xsel -b -i ; }

# common ---------------------------------------------------------------------

top_entry() { echo "${entry_names[$top_line]}" ; }

execute()
{
<<<"$2" grep -q -m 1 '[a-s]' || return # no command

(( confirmation )) &&
	{
	echo -en "\e[H\e[J\n$2" ;
	prompt "execute $1 [y|N] ? " -sn1
	
	[[ "$REPLY" == y ]] || { list ; return ; }
	}

# remember state before removing entries
[[ -e "${e[dir1]}/$(top_entry)" && -e "${e[dir2]}/$(top_entry)" ]] && do_recolor=1 || do_recolor=0

while IFS=$'\n' read command ; do
	IFS=$'\t' read -a elements <<<"$command"
	
	[[ "${elements[0]}" =~ ^rm ]] && 
		{
		${elements[0]} "${elements[1]}/${elements[2]}" &&
			{
			[[ "${elements[1]}" == "${e[dir1]}" ]] && cds="${e[dir1]}" || cds="${e[dir2]}"
			
			color_decendents $INT_DELETED $cds "${elements[2]}"
			}
		}
	
	[[ "${elements[0]}" =~ ^cp ]] && 
		{
		mkdir -p "$(dirname "${elements[3]}/${elements[4]}")" &&
		${elements[0]} "${elements[1]}/${elements[2]}" "${elements[3]}/${elements[4]}" &&
			{
			[[ "${elements[1]}" == "${e[dir1]}" ]] && 
				{ cds="${e[dir1]}" ; cdt="${e[dir2]}" ; } ||
				{ cds="${e[dir2]}" ; cdt="${e[dir1]}" ; }
			
			color_decendents $INT_COPIED $cdt "${elements[2]}"
			(( do_recolor )) && recolor $INT_SYNCHED "$cds" "${elements[2]}"
			}
		}
done <<<"$2"

alt_screen ; list
}

recolor() # color, source, entry
{
while read entry ; do
	{
	[[ "$2" == "${e[dir1]}" ]] && modified1[$3]="$1" || modified2[$3]="$1"
	}
done < <(grep -P "^$4" "${e[$no_color_key]}")
}

color_decendents() # color, side, start_entry
{
while read entry ; do
	[[ "$2" == "${e[dir1]}" ]] && modified1[$entry]="$1" || modified2[$entry]="$1"
done < <(grep -P "^$3" "${e[$no_color_key]}")
}

# Actions on left side tree --------------------------------------------------

action_left() { (( left_side_action ^= 1 )) ; }

# Copy -----------------------------------------------------------------------
cpc() { [[ -e "$1/$2" ]] && echo -e "cp -r\t$1\t$2\t$3\t$4" ; } 

copy_to_left()  { (( left_side_action)) && execute '' "$(rmc "${e[dir1]}" "$(top_entry)")"$'\n'"$(cpc "${e[dir2]}" "$(top_entry)" "${e[dir1]}" "$(top_entry)")" ; }
copy_to_right() { execute '' "$(rmc "${e[dir2]}" "$(top_entry)")"$'\n'"$(cpc "${e[dir1]}" "$(top_entry)" "${e[dir2]}" "$(top_entry)")" ; }

# Delete ---------------------------------------------------------------------

rmc()   { [[ -f "$1/$2" ]] && echo -e "rm\t$1\t$2" ; [[ -d "$1/$2" ]] && echo -e "rm -rf\t$1\t$2" ; }

delete()       { (( left_side_action )) && execute '' "$(rmc "${e[dir1]}" "$(top_entry)")"$'\n'"$(rmc "${e[dir2]}" "$(top_entry)")"  ; }
delete_left()  { (( left_side_action )) && [[ -e "${e[dir1]}/$(top_entry)" ]] && execute '' "$(rmc "${e[dir1]}" "$(top_entry)")"  ; }
delete_right() { [[ -e "${e[dir2]}/$(top_entry)" ]] && execute '' "$(rmc "${e[dir2]}" "$(top_entry)")"  ; }

# ----------------------------------------------------------------------------

update_status()
{
no_color_key="tree_${e[mode]}_no_color"
current_entry="..$(tail -n +$((top_line + 1)) ${e[$no_color_key]} | head -n 1)"

(( action_left )) && action_left_glyph= || action_left_glyph=", !L"

status=$(cut -c1-$COLUMNS <<<"[${e[mode]}: -$deleted_dir1, -$deleted_dir2, !${#diff_index[@]}$action_left_glyph] $current_entry\e[m")
echo -en "\e[$((bottom_line + 2));1H\e[K\e[38;5;240m$status\e[m"
}

pad="$(perl -E 'say " " x 300')"

overlay_line()
{
entry="${entry_names[$2]}"
[[ "$entry" ]] || return 1

[[ ${modified1[$entry]} ]] || [[ ${modified2[$entry]} ]] &&
	{
	echo -en "\e[$1;0H${lines[$2]}\r${modified1[$2]}\e[m"
	
	(( ${#pane_columns[@]} > 1 )) && 
		{ pane_columns=${pane_columns[0]} ; (( pane2_start = pane_columns + 1 )) ; } ||
		{ pane_columns=${pane_columns[0]} ; pane2_start=0 ; }
	
	greyed="${grey_lines[$2]}"
	greyed="${greyed:$start_character:(( pane_columns - 1 ))}"

	padding="${pad:0:(( pane_columns - ( ${#greyed} + 1) ))}"
	
	[[ ${modified1[$entry]} ]] && echo -en "\e[$1;0H${modified1[$entry]}$greyed$padding\e[m"
	[[ ${modified2[$entry]} ]] && echo -en "\e[$1;${pane2_start}H${modified2[$entry]}$greyed${padding}\e[m"
	
	return 0
	}

return 1
}

# vim: set ft=bash:

